Elm.Application = Elm.Application || {};
Elm.Application.make = function (_elm) {
   "use strict";
   _elm.Application = _elm.Application || {};
   if (_elm.Application.values) return _elm.Application.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Error = Elm.Error.make(_elm),
   $Home = Elm.Home.make(_elm),
   $Html = Elm.Html.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Payment = Elm.Payment.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var _op = {};
   var Home = function (a) {    return {ctor: "Home",_0: a};};
   var view = F2(function (address,model) {
      var _p0 = model.currentPage;
      switch (_p0.ctor)
      {case "HomePage": return A2($Home.view,
           A2($Signal.forwardTo,address,Home),
           model.homePage);
         case "PaymentPage": return $Payment.view(model.paymentPage);
         default: return $Error.view("Not Found");}
   });
   var Model = F3(function (a,b,c) {
      return {currentPage: a,homePage: b,paymentPage: c};
   });
   var ConfirmationPage = {ctor: "ConfirmationPage"};
   var PaymentPage = {ctor: "PaymentPage"};
   var HomePage = {ctor: "HomePage"};
   var update = F2(function (action,model) {
      var _p1 = action;
      return _U.update(model,
      {currentPage: HomePage
      ,homePage: A2($Home.update,_p1._0,model.homePage)});
   });
   var init = {currentPage: HomePage
              ,homePage: $Home.init
              ,paymentPage: $Payment.init};
   return _elm.Application.values = {_op: _op
                                    ,HomePage: HomePage
                                    ,PaymentPage: PaymentPage
                                    ,ConfirmationPage: ConfirmationPage
                                    ,Model: Model
                                    ,Home: Home
                                    ,update: update
                                    ,view: view
                                    ,init: init};
};