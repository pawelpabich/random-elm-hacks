Elm.Products = Elm.Products || {};
Elm.Products.make = function (_elm) {
   "use strict";
   _elm.Products = _elm.Products || {};
   if (_elm.Products.values) return _elm.Products.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Events = Elm.Html.Events.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Product = Elm.Product.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var _op = {};
   var update = F2(function (action,model) {
      var _p0 = action;
      return model;
   });
   var Buy = function (a) {    return {ctor: "Buy",_0: a};};
   var view = F2(function (address,model) {
      return A2($Html.section,
      _U.list([]),
      _U.list([A2($Html.h1,
              _U.list([]),
              _U.list([$Html.text("Products")]))
              ,A2($Html.ul,
              _U.list([]),
              A2($List.map,
              function (p) {
                 return A2($Html.div,
                 _U.list([]),
                 _U.list([$Product.view(p)
                         ,A2($Html.button,
                         _U.list([A2($Html$Events.onClick,address,Buy(p.name))]),
                         _U.list([$Html.text("Buy")]))]));
              },
              model))]));
   });
   return _elm.Products.values = {_op: _op
                                 ,Buy: Buy
                                 ,update: update
                                 ,view: view};
};